
## B.2 Phrase structure grammer ##

### B.2.1 Expressions ###

primary_expression:
        identifier
        constant
        string_literal
        ( expression )


postfix_expression:
        primary_expression
        postfix_expression [ expression ]
        postfix_expression ( argument_expression_list<opt> )
        postfix_expression . identifier
        postfix_expression -> identifier
        postfix_expression ++
        postfix_expression --

argument_expression_list:
        assignment_expression
        argument_expression_list , assignment_expression

unary_expression:
        postfix_expression
        ++ unary_expression
        -- unary_expression
        unary_expression cast_expression
        SIZEOF unary_expression
        SIZEOF ( type_name )

unary_operator:
        <one of> & * + - ~ !


cast_expression:
        unary_expression
        ( type-name ) cast_expression

multiplicative_expression:
        cast_expression
        multiplicative_expression * cast_expression
        multiplicative_expression / cast_expression
        multiplicative_expression % cast_expression

additive_expresssion:
        multiplicative_expression
        additive_expresssion + multiplicative_expression
        additive_expresssion - multiplicative_expression

shift_expression:
        additive_expresssion
        shift_expression << additive_expresssion
        shift_expression >> additive_expresssion

relational_expression:
        shift_expression
        relational_expression < shift_expression
        relational_expression > shift_expression
        relational_expression <= shift_expression
        relational_expression >= shift_expression

equality_expression:
        relational_expression
        equality_expression == relational_expression
        equality_expression != relational_expression

AND_expression:
        equality_expression
        AND_expression & equality_expression

exclusive_OR_expression:
        AND_expression
        exclusive_OR_expression ^ AND_expression

inclusive_OR_expression:
        exclusive_OR_expression
        inclusive_OR_expression | exclusive_OR_expression

logical_AND_expression:
        inclusive_OR_expression
        logical_AND_expression && inclusive_OR_expression

logical_OR_expression:
        logical_AND_expression
        logical_OR_expression || logical_AND_expression

conditional_expression:
        logical_OR_expression
        logical_OR_expression ? expression : conditional_expression

assignment_expression:
        conditional_expression
        unary_expression assignment_operator assignment_expression

assignment_operator:
        <one of> = *= /= %= += -= <<= >>= &= ^= |=

expression:
        assignment_expression
        expression, assignment_expression

constant_expression:
        conditional_expression



## B.2.2 Declarations

declaration:
        declaration_specifiers init_declaration_list<opt> ;

declaration_specifiers:
        storage_class_specifier declaration_specifiers<opt>
        type_specifier declaration_specifiers<opt>
        type_qualifier declaration_specifiers<opt>

init_declarator_list:
        init_declarator
        init_declarator_list , init_declarator

init_declarator:
        declarator
        declarator = initializer

storage_class_specifier:
        TYPEDEF
        EXTERN
        STATIC
        AUTO
        REGISTER

type_specifier:
        VOID
        CHAR
        SHORT
        INT
        LONG
        FLOAT
        DOUBLE
        SIGNED
        UNSIGNED
        struct_or_union_specifier
        enum_specifier
        typedef_name

struct_or_union_specifier:
        struct_or_union identifier<opt> { struct_declaration_list }
        struct_or_union identifier
struct_or_union:
        STRUCT
        UNION
struct_declaration_list:
        struct_declaration
        struct_declaration_list struct_declaration
struct_declaration:
        specifier_qualifier_list struct_declarator_list ;
specifier_qualifier_list:
        type_specifier specifier_qualifier_list<opt>
        type_qualifier specifier_qualifier_list<opt>
struct_declaration_list:
        struct_declarator
        struct_declarator_list , struct_declarator
struct_declarator:
        declarator
        declarator<opt> : constant_expression

enum_specifier:
        ENUM identifier<opt> { enumerator_list }
        ENUM identifier

enumerator_list:
        enumerator
        enumerator_list, enumerator
enumerator:
        enumeration_constant
        enumeration_constant = constant_expression

type_qualifier:
        CONST
        VOLATILE

declarator:
        pointer<opt> direct_declarator
direct_declarator:
        identifier
        ( declarator )
        direct_declarator [ constant_expression<opt> ]
        direct_declarator ( parameter_type_list )
        direct_declarator ( identifier_list<opt> )

pointer:
        * type_qualifier_list<opt>
        * type_qualifier_list<opt> pointer
type_qualifier_list:
        type_qualifier
        type_qualifier_list type_qualifier

parameter_type_list:
        parameter_list
        parameter_list , ...
parameter_list:
        parameter_declaration
        parameter_list , parameter_declaration
parameter_declaration:
        declaration_specifiers declarator
        declaration_specifiers abstract_declartor<opt>
identifier_list:
        identifier
        identifier_list , identifier

type_name:
        specifier_qualifier_list abstract_declartor<opt>

abstract_declartor:
        pointer
        pointer<opt> direct_abstract_declarator

direct_abstract_declarator:
        ( abstract_declartor )
        direct_abstract_declarator<opt> [ constant_expression<opt> ]
        direct_abstract_declarator<opt> ( parameter_type_list<opt> )

typedef_name:
        identifier

initializer:
        assignment_expression
        { initializer_list }
        { initializer_list , }
initializer_list:
        initializer
        initializer_list , initializer


## B.2.3 Statements ##

statement:
        labeled_statement
        compound_statement
        expression_statement
        selection_statement
        iteration_statement
        jump_statement


labeled_statement:
        identifier : statement
        CASE constant_expression : statement
        DEFAULT : statement

compound_statement:
        { declaration_list<opt>  statement_list<opt> }

declaration_list:
        declaration
        declaration_list declaration

statement_list:
        statement
        statement_list statement

expression_statement:
        expression<opt> ;

selection_statement:
        IF ( expression ) statement
        IF ( expression ) statement ELSE statement
        SWITCH ( expression ) statement

iteration_statement:
        WHILE ( expression ) statement
        DO statement WHILE ( expression ) ;
        FOR ( expression<opt> ; expression<opt> ; expression<opt> ) statement

jump_statement:
        GOTO identifier ;
        CONTINUE ;
        BREAK ;
        RETURN expression<opt> ;



## B.2.4 External definitions ##

translation_unit:
        external_declaration
        translation_unit external_declaration

external_declaration:
        function_definition
        declaration

function_definition:
        declaration_specifiers<opt> declarator declaration_list<opt> compound_statement



## B.3 Preprocessing directives [not achieved]